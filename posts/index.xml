<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on baalajimaestro</title>
        <link>https://baalajimaestro.me/posts/</link>
        <description>Recent content in Posts on baalajimaestro</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>Maestro Creativescape</copyright>
        <lastBuildDate>Mon, 21 Oct 2019 19:33:00 +0530</lastBuildDate>
        <atom:link href="https://baalajimaestro.me/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>New Bug Tracker</title>
            <link>https://baalajimaestro.me/posts/bugtracker/</link>
            <pubDate>Mon, 21 Oct 2019 19:33:00 +0530</pubDate>
            
            <guid>https://baalajimaestro.me/posts/bugtracker/</guid>
            <description>This post serves as an announcement to the new bugtracker service I have started to use.
This is an unified bugtracker for all projects I work on. People need to report bugs here so that it can be looked after by any of the devs.
Well, the login creds for the issue tracker are as follows.
Username: issue@issue.com
Password: issue
Report the bug at the right project. It will assigned and looked after as soon as possible.</description>
            <content type="html"><![CDATA[<p>This post serves as an announcement to the new bugtracker service I have started to use.</p>
<p>This is an unified bugtracker for all projects I work on. People need to report bugs here so that it can be looked after by any of the devs.</p>
<p>Well, the login creds for the issue tracker are as follows.</p>
<p><code>Username: issue@issue.com</code></p>
<p><code>Password: issue</code></p>
<p>Report the bug at the right project. It will assigned and looked after as soon as possible.</p>
<p>Have a nice day!</p>
]]></content>
        </item>
        
        <item>
            <title>Vendor Blob Extraction</title>
            <link>https://baalajimaestro.me/posts/extract-vendor/</link>
            <pubDate>Thu, 10 Oct 2019 21:24:00 +0530</pubDate>
            
            <guid>https://baalajimaestro.me/posts/extract-vendor/</guid>
            <description>How to extract vendor blobs from stock rom? I got asked this question a lot, so I&#39;ll post it here. Its gonna just be steps on how to do it.
⚠️ Note that you need a fully synced rom source for this.
  Place the Device Tree with the extract-files.sh inside.
  If your device tree doesn&#39;t have an extract-files script, get it from github, its almost on every tree.</description>
            <content type="html"><![CDATA[<h2 id="how-to-extract-vendor-blobs-from-stock-rom">How to extract vendor blobs from stock rom?</h2>
<p>I got asked this question a lot, so I'll post it here. Its gonna just be steps on how to do it.</p>
<p>⚠️ Note that you need a fully synced rom source for this.</p>
<ul>
<li>
<p>Place the Device Tree with the extract-files.sh inside.</p>
</li>
<li>
<p>If your device tree doesn't have an extract-files script, get it from github, its almost on every tree.</p>
</li>
<li>
<p>Grab the stock rom for your device, MIUI/OOS or OneUI whatever.</p>
</li>
<li>
<p>Create a new folder named dump and extract it there.</p>
</li>
<li>
<p>Now see if it has a payload.bin or system.dat.br and vendor.dat.br</p>
</li>
</ul>
<h3 id="if-it-has-a-payloadbin-then-your-device-is-ab-and-the-job-is-actually-very-easy">If it has a payload.bin, then, your device is A/B, and the job is actually very easy,</h3>
<ul>
<li>Use <a href="https://forum.xda-developers.com/attachment.php?attachmentid=4760222">this tool</a> and run the python file in it.</li>
<li>You will now have img files ready.</li>
</ul>
<h3 id="you-are-unlucky-and-have-br-files-inside">You are unlucky and have br files inside.</h3>
<p>So what? We can still extract them, a bit of more work, but yes we can.</p>
<ul>
<li>Install brotli from your package manager</li>
<li>Run the following commands, it will decompress the brotli compression of your images</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">brotli --decompress system.new.dat.br
brotli --decompress vendor.new.dat.br
</code></pre></div><ul>
<li>Now we to convert the dat files to img, run these commands on terminal, to convert it</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">curl -sLo sdat2img.py https://raw.githubusercontent.com/xpirt/sdat2img/master/sdat2img.py
python3 sdat2img.py system.transfer.list system.new.dat
python3 sdat2img.py vendor.transfer.list vendor.new.dat vendor.img
</code></pre></div><ul>
<li>Now you would have both the images ready for extracting.</li>
</ul>
<h3 id="final-step">Final Step</h3>
<p>Lets Extract the img files we have!</p>
<ul>
<li>Create folders for extracting.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">mkdir -p system
mkdir -p vendor
</code></pre></div><ul>
<li>
<p>Install P7-Zip from your package manager</p>
</li>
<li>
<p>Now the extraction.</p>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">7z x system.img -y -osystem
7z x vendor.img -y -ovendor
</code></pre></div><p>In your folder, there would be two folders system and vendor, with many files now.</p>
<h3 id="pulling--blobs">Pulling  blobs</h3>
<ul>
<li>
<p>The work directory which had the system and vendor folders is assumed to be at ~/dump for now.</p>
</li>
<li>
<p>cd to the device tree, and run the command</p>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">bash extract-files.sh ~/dump
</code></pre></div><ul>
<li>Your vendor blobs would be at <code>vendor/brand/device</code></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Opensource and Monetization</title>
            <link>https://baalajimaestro.me/posts/opensource-and-monetisation/</link>
            <pubDate>Mon, 24 Jun 2019 03:30:00 +0530</pubDate>
            
            <guid>https://baalajimaestro.me/posts/opensource-and-monetisation/</guid>
            <description>Seems like these don’t go hand in hand, does it?
Lemme view it from my perspective.
Recently there was an android kernel developer who tried to monetize his kernel in the most inappropriate way possible. It became disastrous and he became a meme in that process. He was forced to leave development, forever.
So, is monetizing opensource software cancerous?
Red Hat is the global leader in open source software solutions — and has a clear strategy in how to generate revenue.</description>
            <content type="html"><![CDATA[<p>Seems like these don’t go hand in hand, does it?</p>
<p>Lemme view it from my perspective.</p>
<p>Recently there was an android kernel developer who tried to monetize his kernel in the most inappropriate way possible. It became disastrous and he became a meme in that process. He was forced to leave development, forever.</p>
<p>So, is monetizing opensource software cancerous?</p>
<p>Red Hat is the global leader in open source software solutions — and has a clear strategy in how to generate revenue. They package the popular open source operating system Linux as Red Hat Enterprise Linux and deliver it to enterprises with a promise of 10 years of support. Open source projects like Linux can literally change every day, so that’s a tall order.</p>
<p>So how do they live in the opensource market?
Is monetizing opensource stuff good?</p>
<p>GPL, the most renowned license in the opensource world, permits monetising the code.
So where are people going wrong in their attempts to monetise their works?</p>
<p>Greed is good, yes read it again, greed is good. Money rules life.</p>
<p>Lets see possible ways to monetize an opensource project.</p>
<h4 id="advertising">Advertising</h4>
<p>Monetize download links with ads, you must have seen a few people doing this. The download link is url shortened and is sent to the public.</p>
<p>Ads on the project website can also be a possible way to monetise your project.</p>
<h4 id="paid-features">Paid Features</h4>
<p>Lemme cite an example of this case. The pretty famous Hyperion Launcher for android is opensource. But it does have features like gestures and widgets which needs the hyperion supreme package, the paid version. The developer earns in the case where people pay for using all the cool features which are locked.</p>
<p>(( Lawnchair laughs ))</p>
<h4 id="dual-licensing">Dual Licensing</h4>
<p>Dual licensing allows companies to release commercial software (with a commercial license) that’s derived from free OSS commonly distributed under the GNU General Public (GPL) license. A company releases identical products under a commercial license and under a free license like GPL. MySQL is a pretty good example of this case, where they produce community edition under GPL and enterprise edition under their own commercial license</p>
<h4 id="paid-support">Paid Support</h4>
<p>Red Hat promises really great customer support for their premium enterprise Linux Distribution. People who rely on their servers a lot usually pay for this paid support since this ensures their servers never breaks down. This all happens while their linux source code is fully opensource.</p>
<p>Open source software is highly regarded thanks to its security, reliability, and vibrant communities that support it. Moreover, OSS helps companies avoid reinventing the wheel, and can even be used within proprietary software. Altogether, these factors have made OSS quite popular. Today, people are willing to pay for open source software to ensure legal protection, technical support, and professional services. With paid open source technologies, companies can offer the best of both worlds: transparent technology with the support and features of commercial software.</p>
]]></content>
        </item>
        
        <item>
            <title>Git For Newbies</title>
            <link>https://baalajimaestro.me/posts/git-for-newbies/</link>
            <pubDate>Tue, 18 Jun 2019 12:29:41 +0800</pubDate>
            
            <guid>https://baalajimaestro.me/posts/git-for-newbies/</guid>
            <description>Before we start make sure git --version command successfully returns. If the output is something like command not found then please make sure Git is properly installed on your machine. My machine output is shown below. Output on your machine might be different.
 Commands that a user should type on his/her terminal are prefixed with the shell prompt symbol $. The output of command follows the command. Also, you don&#39;t have to type $ on your terminal.</description>
            <content type="html"><![CDATA[<p>Before we start make sure <code>git --version</code> command successfully returns. If the output is something like <strong>command not found</strong> then please make sure Git is properly installed on your machine. My machine output is shown below. <strong>Output on your machine might be different.</strong></p>
<blockquote>
<p><strong>Commands that a user should type on his/her terminal are prefixed with the shell prompt symbol <code>$</code>. The output of command follows the command. Also, you don't have to type <code>$</code> on your terminal.</strong></p>
</blockquote>
<p>Please be nice to Mr.Git. Introduce yourself to him. Else git will blame you for not introducing yourself <code>please tell me who you are!</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git config --global user.name <span style="color:#e6db74">&#34;Your name&#34;</span>
$ git config --global user.email <span style="color:#e6db74">&#34;Your email&#34;</span>
</code></pre></div><p>The command shown above populates a file named <code>.gitconfig</code> in your user home directory with configuration information.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cat ~/.gitconfig
</code></pre></div><pre><code>[user]
	name = baalajimaestro
	email = baalajimaestro@computer4u.com
</code></pre><h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li>Why version control system?</li>
<li>What the heck is Git?</li>
<li>Git basics
<ul>
<li>git init</li>
<li>git status</li>
<li>git add</li>
<li>git commit</li>
<li>git rm</li>
<li>git log</li>
<li>.gitignore files</li>
</ul>
</li>
<li>Working with branches
<ul>
<li>git branch</li>
<li>git checkout</li>
<li>git merge</li>
</ul>
</li>
<li>Working with remote repositories
<ul>
<li>git remote</li>
<li>git pull</li>
<li>git push</li>
<li>git clone</li>
</ul>
</li>
<li>Github basics
<ul>
<li>Why and What Pull Requests?</li>
</ul>
</li>
<li>Advanced topics
<ul>
<li>git rebase</li>
<li>git cherry-pick</li>
<li>git alias</li>
</ul>
</li>
<li>Useful Git commands</li>
</ul>
<h2 id="vcs-version-control-system">VCS: Version Control System</h2>
<p>A version control system is a kind of database for storing your software project source code. It lets you save a snapshot of your complete project at any time you want. When you later take a look at an older snapshot (let's start calling it &ldquo;version&rdquo;).</p>
<p>You can use version control system to store:</p>
<ol>
<li>Software source code</li>
<li>Text files</li>
<li>Writing books</li>
<li>Sharing datasets</li>
</ol>
<h2 id="why-version-control-system">Why version control system?</h2>
<p>You should use version control because it offers the below:</p>
<ol>
<li>Collaboration among a team of Coders</li>
<li>Versioning the code. Could create multiple branches to setup binary releases</li>
<li>Restoring to previous versions</li>
<li>Tracking the history (who to blame!)</li>
<li>Backup. Old style backup methodologies like email storage, local file system or FTP backup are cumbersome.</li>
</ol>
<h2 id="what-the-heck-is-git">What the heck is Git?</h2>
<p>Git is a distributed version control system. It was developed by Linus Torvalds in 2005 for linux developers and is being maintained by a large community across the world.</p>
<p>Every Git working directory is a full-fledged repository with complete history and full version-tracking capabilities, independent of network access or a central server.</p>
<!-- raw HTML omitted -->
<p>Distributed or Decentralized VCS allows many software developers to work on a project without requiring them to share a common network.</p>
<h2 id="git-basics">Git basics</h2>
<p>Let's start by creating an empty directory <code>git-basic</code>. Navigate to a convenient location on your local file system and create a new directory.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ mkdir git-basic <span style="color:#f92672">&amp;&amp;</span> cd git-basic
</code></pre></div><h3 id="git-init">git init</h3>
<p>To make any repository a Git managed repository, you can type the following command. These commands should be typed from inside the <code>git-basic</code> directory.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git init
</code></pre></div><pre><code>Initialized empty Git repository in ~/git-basic/.git/
</code></pre><p>This will create a directory named <code>.git</code> inside the <code>git-basic</code> directory.</p>
<p><code>.git</code> is a directory where Git stores all the data. <strong>Don't mess with the <code>.git</code> directory.</strong></p>
<p>If you want to override user for this repository, then you can add user section by either editing <code>.git/config</code> file or using the <code>git config --local</code> command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git config --local user.name <span style="color:#e6db74">&#34;Shekhar 123&#34;</span>
</code></pre></div><p>If you view the contents of the <code>.git/config</code> file now, then you will see your change.</p>
<h3 id="git-status">git status</h3>
<p>Time and again we will need to know status of our Git repository. By status what we mean is the current state of the repository. E.g., what needs to be added to the index, what needs to be committed, if there is any change that we have to commit, etc., This is the command that you will use the most.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git status
</code></pre></div><pre><code>On branch master

Initial commit

nothing to commit (create/copy files and use &quot;git add&quot; to track)
</code></pre><h3 id="git-add">git add</h3>
<p>Let's create a new file <code>README.md</code> and add a dummy message.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ echo <span style="color:#e6db74">&#34;# Git Basics&#34;</span> &gt;&gt; README.md
</code></pre></div><blockquote>
<p><strong>It is a good practice to create a file named README.md in your repository root that tells the purpose of the repository.</strong></p>
</blockquote>
<p>Now, check the status of the Git repository.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git status
</code></pre></div><pre><code>On branch master

Initial commit

Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)

	README.md

nothing added to commit but untracked files present (use &quot;git add&quot; to track)
</code></pre><p><strong>git add</strong> stages the changes so they are picked up by the next commit. In Git, you can't commit something until its tracked.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git add README.md
</code></pre></div><p>Now, check the status of your Git repository.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git status
</code></pre></div><pre><code>On branch master

Initial commit

Changes to be committed:
  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)

	new file:   README.md
</code></pre><blockquote>
<p><strong>If you have multiple files then you can use <code>git add &lt;file1&gt; &lt;file2&gt; .. &lt;filen&gt;</code> or <code>git add --all</code> or <code>git add -A</code> to stage them in one command.</strong></p>
</blockquote>
<h3 id="git-commit">git commit</h3>
<p>Once you have a smallest working change, you should commit it to your version control system. Smallest working change could be a test case, a small piece of functional code, a line or paragraph in your text file, etc. <strong>You should commit often and daily.</strong> Also, every commit should strive to do exactly one change.</p>
<p>After staging your changes, next step is to commit them into your local Git repository. To do that, we will use commit command as shown below.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git commit -m <span style="color:#e6db74">&#34;first commit&#34;</span>
</code></pre></div><pre><code>[master (root-commit) 3d34eb3] first commit
 1 file changed, 1 insertion(+)
 create mode 100644 README.md
</code></pre><p>Staging and committing are two different steps in Git. You can't commit a change until it has been staged. If you are working with a tracked file, then you can do both of these steps in a single command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ echo <span style="color:#e6db74">&#34;This is my Git.&#34;</span>  &gt;&gt; README.md
</code></pre></div><p>Check the status of your repository. This time it will say it is a <strong>modified</strong> change.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git status
</code></pre></div><pre><code>On branch master
Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)

	modified:   README.md

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre><p>To stage and commit a change in a tracked file, you can use following command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git commit -am <span style="color:#e6db74">&#34;second commit&#34;</span>
</code></pre></div><h3 id="git-rm">git rm</h3>
<p>Let's suppose we added a bad file to the Git index that we want to remove.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ echo <span style="color:#e6db74">&#34;my stupid file&#34;</span> &gt;&gt; stupid.txt
$ git add stupid.txt
</code></pre></div><p>To remove such a file from the Git index, we can use Git <code>rm</code> command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git rm -f stupid.txt
</code></pre></div><p>To remove directories,</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git rm -rf crap
</code></pre></div><h3 id="git-log">git log</h3>
<p>To view history of your commit logs, use the following command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git log
</code></pre></div><p>If you want to see a commit in one line, then use <code>--oneline</code> option.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git log --oneline
</code></pre></div><p>There are many more options. You can refer to help <code>git help log</code> for more details.</p>
<h3 id="gitignore-files">.gitignore files</h3>
<p>Every Git repository should have another configuration file <code>.gitignore</code> present in the root i.e. directly inside the <code>git-basic</code> directory. This file is used to specify files and file patterns that you want git to ignore .</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ echo <span style="color:#e6db74">&#34;*.log&#34;</span> &gt;&gt; .gitignore
$ echo <span style="color:#e6db74">&#34;target/&#34;</span> &gt;&gt; .gitignore
$ echo <span style="color:#e6db74">&#34;dummy.txt&#34;</span> &gt;&gt; .gitignore
</code></pre></div><ol>
<li>The first pattern says any file with extension <code>log</code> will ignored.</li>
<li>The second pattern says directory with name <code>target</code> will be ignored.</li>
<li>The third pattern means file with name <code>dummy.txt</code> will be ignored.</li>
</ol>
<p>Now add and commit the <code>.gitignore</code> to your Git repository.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git add .gitignore
$ git commit -m <span style="color:#e6db74">&#34;Adding .gitignore file&#34;</span>
</code></pre></div><h2 id="working-with-branches">Working with branches</h2>
<p>A branch represents an independent line of development. You use branch for following:</p>
<ol>
<li>Develop a new feature. Once you are done with the feature, it can be merged into your main branch.</li>
<li>Fix a bug.</li>
<li>Your experiment playground.</li>
</ol>
<p>By default, every git repository has one branch called <strong>master</strong>. When you create a new branch, you get a new development workspace. Any change that you make to the new working directory has no impact on your previous working directory.</p>
<h3 id="git-branch">git branch</h3>
<p><strong>git branch</strong> command lets you work with Git branches.</p>
<p>To view all the branches, you execute following command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git branch
* master
</code></pre></div><blockquote>
<p><strong>branch marked with a * is the current branch.</strong></p>
</blockquote>
<p>Let's suppose we have to implement some new functionality. To work on new functionality, we create a new branch called <code>feature1</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git branch feature1
</code></pre></div><p>You can view branch list again.</p>
<pre><code>$ git branch
  feature1
* master
</code></pre><p>One thing that is important to understand here is Git branches are just pointers to commits. When you create a branch, all Git needs to do is create a new pointer; it doesn’t change the repository in any other way.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git log --oneline --decorate
</code></pre></div><h3 id="git-checkout">git checkout</h3>
<p>To switch to a branch, you use checkout command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git checkout feature1
</code></pre></div><p>The <code>git checkout</code> command lets you navigate between the branches created by git branch.</p>
<p>To create a new branch and checkout it in one command</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git checkout -b feature1
</code></pre></div><p>Let's add our new feature now.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ echo <span style="color:#e6db74">&#34;I will read a Git tutorial today to make sure I understand Git thoroughly.&#34;</span> &gt;&gt; README.md
</code></pre></div><p>Commit it to the <code>feature1</code> branch.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git commit -am <span style="color:#e6db74">&#34;fifth commit. Read tutorial&#34;</span>
</code></pre></div><h3 id="git-merge-ff">git merge (ff)</h3>
<p>Once we are done with our feature, we can merge it back to master. First, we'll switch to <code>master</code> branch.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git checkout master
</code></pre></div><p><strong>git merge</strong> command allows you to merge an independent development line created by <code>git branch</code> into a single branch.</p>
<blockquote>
<p>git merge will merge into the current branch.</p>
</blockquote>
<p>To merge <code>feature1</code> branch into <code>master</code> branch, execute the following command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git merge feature1
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git log --oneline --decorate
</code></pre></div><blockquote>
<p>the default merge algorithm is ff i.e fast forward. When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This is the default behavior.</p>
</blockquote>
<p>A <strong>fast-forward</strong> merge can occur when there is a linear path from the current branch tip to the target branch.</p>
<p>Now that we are done with <code>feature1</code> branch, let's delete it.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git branch -d feature1
</code></pre></div><h3 id="git-merge---no-ff">git merge (&ndash;no-ff)</h3>
<p>Create another new branch <code>feature2</code> and add a new commit.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git checkout -b feature2
$ echo <span style="color:#e6db74">&#34;I will watch a Git video by Linus Torvalds https://www.youtube.com/watch?v=4XpnKHJAok8&#34;</span> &gt;&gt; README.md
$ git commit -am <span style="color:#e6db74">&#34;sixth commit. Watch video.&#34;</span>
</code></pre></div><p>Now checkout master again.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git checkout master
</code></pre></div><p>The <code>--no-ff</code> algorithm always generate a merge commit (even if it was a fast-forward merge)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git merge --no-ff feature2
</code></pre></div><p>View logs of master</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git log --oneline --decorate
</code></pre></div><p>The interesting bit is that it created a merge commit. Git uses Three-way merge algorithm.</p>
<ol>
<li>the <code>MERGE_HEAD</code> commit i.e. the modification that we want to merge</li>
<li>the <code>HEAD</code> commit i.e. the branch in which the <code>MERGE_HEAD</code> will be merged i.e. the branch on which the git merge command is called</li>
<li>the <code>ORIG_HEAD</code> commit i.e. the best common ancestor of <code>MERGE_HEAD</code> and <code>HEAD</code> that will serve as the reference.</li>
</ol>
<p>Delete the feature branch <code>feature2</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git branch -d feature2
</code></pre></div><h3 id="git-merge-commits-in-both-master-and-branch">git merge (commits in both master and branch)</h3>
<p>Create another new branch <code>feature2</code> and add a new commit.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git checkout -b feature3
$ echo <span style="color:#e6db74">&#34;I will try Git using tutorial https://try.github.io/&#34;</span> &gt;&gt; README.md
$ git commit -am <span style="color:#e6db74">&#34;seventh commit. Try Git.&#34;</span>
</code></pre></div><p>Checkout master branch and edit an existing line.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git checkout master
</code></pre></div><p>Change <strong>I will read a Git tutorial today to make sure I understand Git thoroughly.</strong> to <strong>I will read a Git tutorial <a href="https://www.atlassian.com/git/tutorials/">https://www.atlassian.com/git/tutorials/</a>.</strong></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cat README.md
</code></pre></div><pre><code># Git Playground
This is my Git playground.
I will learn Git today during the XKE.
I will read a Git tutorial https://www.atlassian.com/git/tutorials/.
I will watch a Git video by Linus Torvalds https://www.youtube.com/watch?v=4XpnKHJAok8
</code></pre><p>Now, commit the change to master branch.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git commit -am <span style="color:#e6db74">&#34;fixed Git tutorial bullet point&#34;</span>
</code></pre></div><p>Now merge the <code>feature3</code> branch. This will create a merge commit.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git merge feature3
</code></pre></div><p>View the log graph.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git log --oneline --graph
</code></pre></div><h3 id="git-merge-conflict">git merge (conflict)</h3>
<p>In this section, we will look at scenario where there is a merge conflict. Merge conflict happens when you're trying to merge a branch that has changed the same part of the same file as master. Let's create a new branch <code>feature4</code>, make a change, and commit.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git checkout -b feature4
$ echo <span style="color:#e6db74">&#34;I will create a Github account today.&#34;</span> &gt;&gt; README.md
$ git commit -am <span style="color:#e6db74">&#34;eighth commit. Signup for Github.&#34;</span>
</code></pre></div><p>Now, checkout master, make a change, and then commit it.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git checkout master
$ echo <span style="color:#e6db74">&#34;I will create my first repository today.&#34;</span> &gt;&gt; README.md
$ git commit -am <span style="color:#e6db74">&#34;eighth commit. Create repository on Github.&#34;</span>
</code></pre></div><p>If you try to merge the <code>feature4</code> branch, you will get merge conflict as shown below.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git merge feature4
</code></pre></div><pre><code>Auto-merging README.md
CONFLICT (content): Merge conflict in README.md
Automatic merge failed; fix conflicts and then commit the result.
</code></pre><p>To merge the conflict, open the file in your favorite editor. I like <a href="https://github.com/atom/atom">Atom</a>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cat README.md
</code></pre></div><pre><code># Git Playground
This is my Git playground.
I will learn Git today during the XKE.
I will read a Git tutorial https://www.atlassian.com/git/tutorials/.
I will watch a Git video by Linus Torvalds https://www.youtube.com/watch?v=4XpnKHJAok8
I will try Git using tutorial https://try.github.io/
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
I will create my first repository today.
=======
I will create a Github account today.
&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature4
</code></pre><p>The merged output is shown below.</p>
<pre><code># Git Playground
This is my Git playground.
I will learn Git today during the XKE.
I will read a Git tutorial https://www.atlassian.com/git/tutorials/.
I will watch a Git video by Linus Torvalds https://www.youtube.com/watch?v=4XpnKHJAok8
I will try Git using tutorial https://try.github.io/
I will create a Github account today.
I will create my first repository today.
</code></pre><p>To make the merge resolved, execute <code>git add</code> command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git add README.md
</code></pre></div><p>Commit it</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git commit -am <span style="color:#e6db74">&#34;Resolved merged conflict with feature4 branch&#34;</span>
</code></pre></div><h2 id="working-with-remote-repositories">Working with remote repositories</h2>
<p>In Git, every developer has their own local copy of the repository. It has all the repository history and branches. A developer works on their local copy and when done with the work, the changes can be pushed to a remote repository. A local repository can point to 0 or more remote repositories. A remote repository could be on Github or any other cloud VCS provider or even it could be on your own machine.</p>
<h3 id="git-remote">git remote</h3>
<p>The <strong>git remote</strong> command lets you create, view, and delete connections to other repositories.</p>
<p>To view all the remotes, execute the following command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git remote
</code></pre></div><p>As we have not added any remote yet, this command will not print any output.</p>
<p>To add a new remote, execute the following command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git remote add local ../git-basic-remote.git
</code></pre></div><blockquote>
<p><strong>Please use correct path to your remote repository.</strong></p>
</blockquote>
<p>To push our repository changes to this remote repository we can run the following command. This command will be executed from inside the <code>git-basic</code> directory.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git push local master
</code></pre></div><pre><code>Counting objects: 37, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (32/32), done.
Writing objects: 100% (37/37), 3.41 KiB | 0 bytes/s, done.
Total 37 (delta 11), reused 0 (delta 0)
To ../git-basic-remote.git
 * [new branch]      master -&gt; master
</code></pre><p>Now, you can create multiple local copies of the remote repository using <code>clone</code> command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git clone git-basic-remote.git git-basics
</code></pre></div><pre><code>Cloning into 'git-basics'...
done.
</code></pre><p>Change directory and view the contents.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cd git-basic-1
</code></pre></div><p>You can see history of the repository using <code>git log --oneline --decorate</code> command.</p>
<p>Let's make a change in <code>git-basics</code> repository.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ echo <span style="color:#e6db74">&#34;I will read Git in Practice book&#34;</span> &gt;&gt; README.md
$ git commit -am <span style="color:#e6db74">&#34;ninth commit. Read book.&#34;</span>
$ git push local master
</code></pre></div><p>To get changes in our first repository i.e. <code>git-basic</code>, you will use <code>pull</code> command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git pull local master
</code></pre></div><h2 id="github-basics">Github basics</h2>
<p>Github is a collaborative code management platform for open source and private projects. It has social features just like any other social website like Facebook, Twitter, etc.</p>
<p>You use Github to store your code on a remote Git repository.</p>
<p>You can <a href="https://github.com/join">sign up</a> for Github.</p>
<h3 id="create-a-repository">Create a repository</h3>
<p>Create a <a href="https://github.com/new">new repository</a>.</p>
<p>Give it name <code>git-bas</code> and choose defaults.</p>
<h3 id="add-remote">add remote</h3>
<p>From inside your <code>git-basic</code>, execute the following command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git remote add origin https://github.com/baalajimaestro/git-basic.git
</code></pre></div><h3 id="git-push">git push</h3>
<p>Push the changes to Github.</p>
<h3 id="create-pull-request">Create pull request</h3>
<ol>
<li>Clone your repo on your local machine.</li>
<li>Commit and push the changes to your fork</li>
<li>Create a pull request</li>
</ol>
<h3 id="git-rebase">git rebase</h3>
<p>Rebasing is the process of moving a branch to a new base commit. It is used to keep Git history linear so you will not have merge commits.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git checkout -b feature5
$ echo <span style="color:#e6db74">&#34;I will prefer rebase over merge to avoid merge commit.&#34;</span> &gt;&gt; README.md
$ git commit -am <span style="color:#e6db74">&#34;tenth commit. Prefer rebase over merge&#34;</span>
</code></pre></div><p>Work on master branch.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git checkout master
$ echo <span style="color:#e6db74">&#34;I will prefer merge over rebase as it is easy to understand.&#34;</span> &gt;&gt; README.md
$ git commit -am <span style="color:#e6db74">&#34;Merge over Rebase&#34;</span>
</code></pre></div><p>Rebase command</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git rebase feature5 master
</code></pre></div><p>Fix merge conflicts.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git add README.md
$ git rebase --continue
</code></pre></div><p>Now view the logs using</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git log --oneline --decorate --graph
</code></pre></div><p>Delete the branch</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git branch -d feature5
</code></pre></div><h3 id="git-cherry-pick">git cherry-pick</h3>
<p>Applying a commit from one branch to another</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git cherry-pick &lt;commit-hash&gt;
</code></pre></div><h3 id="git-alias">git alias</h3>
<p>Allows you write your own commands or shortcuts. Like we have been using <code>git log --oneline --decorate --graph</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git config --global alias.mylog <span style="color:#e6db74">&#34;log --oneline --decorate --graph&#34;</span>
</code></pre></div>]]></content>
        </item>
        
    </channel>
</rss>
